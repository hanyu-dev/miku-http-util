[package]
name = "miku-http-util"
version = "0.6.1"
edition = "2021"
rust-version = "1.80.0"

# === Publication info ===
authors = ["Hantong Chen <cxwdyx620@gmail.com>"]
categories = ["network-programming"]
description = "Utilities for parsing or building parts of HTTP requests and responses."
keywords = ["http", "fluent-uri"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/hanyu-dev/miku-http-util"

[package.metadata.docs.rs]
features = ["dev"]

[dependencies]
anyhow = { version = "1.0.96" }
axum = { version = "0.8.0", default-features = false, optional = true }
base64 = { version = "0.22.1", optional = true }
bytes = { version = "1.0.0", optional = true }
fluent-uri = { version = "0.3.2", default-features = false, optional = true }
foldhash = { version = "0.1.4", optional = true }
http = { version = "1.0.0", optional = true }
# http-body-util = { version = "0.1.0", optional = true }
macro-toolset = { version = "0.8.2", default-features = false, optional = true }
md-5 = { version = "0.10.6", optional = true }
percent-encoding = { version = "2.1.0", optional = true }
prost = { version = "0.13.0", optional = true }
serde = { version = "1.0.0", default-features = false, optional = true }
serde_json = { version = "1.0.0", optional = true }
thiserror = { version = "2.0.11", optional = true }
tower-layer = { version = "0.3.2", optional = true }
tower-service = { version = "0.3.0", optional = true }
tracing = { version = "0.1.0", default-features = false, optional = true }

[dev-dependencies]
axum = "0.8.1"
serde_json = "1.0.139"

[features]
# For development purposes, enable all features.
dev = [
    "feat-integrate-http",
    "feat-integrate-axum",
    "feat-integrate-tower",
    "feat-tracing",
    "feat-request-builder",
    "feat-request-header",
    "feat-request-parser",
    "feat-request-misc-proxy",
    "feat-response",
    "feat-response-ext-json",
]

# Request related features.
feat-request-builder = [
    "dep:macro-toolset",
    "dep:md-5",
    "macro-toolset/feat-hash",
    "macro-toolset/feat-string",
    "macro-toolset/feat-string-ext-urlencoding",
]
feat-request-header = [
    "dep:bytes",
    "dep:http",
    "dep:macro-toolset",
    "dep:prost",
    "macro-toolset/feat-base64",
    "macro-toolset/feat-string",
    "macro-toolset/feat-string-ext-base64",
    "macro-toolset/feat-string-ext-http",
]
feat-request-parser = ["dep:fluent-uri", "dep:foldhash", "dep:macro-toolset"]
feat-request-misc-proxy = [
    "dep:base64",
    "dep:bytes",
    "dep:fluent-uri",
    "dep:http",
    "dep:percent-encoding",
    "dep:serde",
    "dep:thiserror",
    "fluent-uri/std",
]

# Response related features.
feat-response = ["dep:bytes", "dep:http"]
# Enable JSON support for response.
feat-response-ext-json = ["dep:serde", "dep:serde_json"]

# Integrate with the `http` crate.
feat-integrate-http = ["dep:http"]
feat-integrate-axum = ["feat-request-parser", "feat-integrate-http", "dep:thiserror", "dep:axum"]
feat-integrate-tower = [
    "feat-request-parser",
    "feat-integrate-http",
    "dep:thiserror",
    "dep:tower-service",
    "dep:tower-layer",
]

# Enable tracing support.
feat-tracing = ["dep:tracing"]

# === Lints config ===

[lints.rust]
unsafe_code = "warn"
missing_docs = "warn"
missing_debug_implementations = "warn"
unreachable_pub = "warn"

# Only works in nightly channel, use `cargo +nightly clippy --fix --allow-dirty --allow-staged`

[lints.clippy]
# See: https://rust-lang.github.io/rust-clippy/master/index.html for more details.

# Checks for attributes that allow lints without a reason.
allow_attributes_without_reason = "warn"
# Checks for `assert!(r.is_ok())` or `assert!(r.is_err())` calls, just `unwrap()` instead.
assertions_on_result_states = "warn"
# Checks for code like `foo = bar.clone()`; use `Clone::clone_from()` instead.
assigning_clones = "warn"
# Instead of using an if statement to convert a bool to an int, this lint suggests using a from() function or an as coercion.
bool_to_int_with_if = "warn"
# Checks for methods with high cognitive complexity.
cognitive_complexity = "warn"
# Checks usage of std::fs::create_dir and suggest using std::fs::create_dir_all instead.
create_dir = "warn"
# Checks for usage of the dbg! macro.
dbg_macro = "warn"
# Checks for function/method calls with a mutable parameter in debug_assert!, debug_assert_eq! and debug_assert_ne! macros.
# Mutating something in a debug_assert! macro results in different behavior between a release and debug build.
debug_assert_with_mut_call = "warn"
# Checks for literal calls to `Default::default()`. Use `$type::default()` instead.
default_trait_access = "warn"
# Checks for types that derive PartialEq and could implement Eq.
# derive_partial_eq_without_eq = "warn"
# Checks for usage of unicode scripts other than those explicitly allowed by the lint config.
disallowed_script_idents = "deny"
# Detects the syntax ['foo'] in documentation comments (notice quotes instead of backticks) outside of code blocks
doc_link_with_quotes = "warn"
# Checks for the presence of _, :: or camel-case words outside ticks in documentation.
doc_markdown = "warn"
# Checks for usage of if expressions with an else if branch, but without a final else branch.
else_if_without_else = "deny"
# Checks for use Enum::*.
enum_glob_use = "warn"
# is_file doesn’t cover special file types in unix-like systems, and doesn’t cover symlink in windows.
# Using !FileType::is_dir() is a better way
filetype_is_file = "warn"
# Checks for usage of .to_string() on an &&T where T implements ToString directly (like &&str or &&String).
inefficient_to_string = "warn"
# Checks for usage of std::mem::forget(t) where t is Drop or has a field that implements Drop.
mem_forget = "warn"
# Checks the doc comments of publicly visible functions that return a Result type and warns if there is no # Errors section.
# missing_errors_doc = "warn"
# Checks the doc comments of publicly visible functions that may panic and warns if there is no # Panics section.
missing_panics_doc = "warn"
# Checks that module layout uses only self named module files; bans mod.rs files.
mod_module_files = "deny"
# Checks for multiple inherent implementations of a struct
multiple_inherent_impl = "warn"
# Checks for usage of Mutex<X> where an atomic will do.
mutex_atomic = "warn"
# Checks for usage of Mutex<X> where X is an integral type. Use Atomic instead.
mutex_integer = "warn"
# The lint checks for if-statements appearing in loops that contain a continue statement in either their main blocks or their else-blocks, 
# when omitting the else-block possibly with some rearrangement of code can make the code easier to understand.
needless_continue = "warn"
# Checks for usage of panic!.
panic = "warn"
# Checks for temporaries returned from function calls in a match scrutinee that have the clippy::has_significant_drop attribute.
significant_drop_in_scrutinee = "warn"
# Checks for usage of todo!.
todo = "warn"
# Checks for usage of unimplemented!.
unimplemented = "warn"
# Checks for usage of unreachable!.
# unreachable = "warn"
# Checks for wildcard dependencies in the Cargo.toml.
wildcard_dependencies = "deny"
# Checks for wildcard imports use _::*
wildcard_imports = "warn"
